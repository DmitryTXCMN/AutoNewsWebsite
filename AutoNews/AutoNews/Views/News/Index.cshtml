@model AutoNews.Controllers.NewsController.NewsModel
@{
    ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" href="css/news.css">
<div class="newsPageBody">
    <img class="newsImage" src="@Model.News.LogoUrl"
         alt="newsImage">
    <span class="newsCreator">
    </span>

    <span class="newsTitle">
        @Model.News.Title
    </span>
    <div class="line"></div>
    <span class="newsArticle_">
        @Model.News.Text
    </span>

    <div class="likeSection">
        Liked: @Model.News.Likes
        @if (!Model.UserLiked)
        {
            <button class="likeButton" role="button" aria-pressed="false" onclick="handleBtnClick(event)"
                onKeyDown="handleBtnKeyDown(event)" type="submit">Like
        </button>
        }
        else 
        {
             <button class="likeButton" role="button" aria-pressed="true" onclick="handleBtnClick(event)"
                onKeyDown="handleBtnKeyDown(event)" type="submit">Like
            </button>
        }
            
        <script>
                //click
                function handleBtnClick(event) {
                    toggleButton(event.target);
                }
                //кнопка нажата
                function handleBtnKeyDown(event) {
                    if (event.key === " " || event.key === "Enter" || event.key === "Spacebar") {
                        event.preventDefault();
                        toggleButton(event.target);
                    }
                }

                async function toggleButton(element) {
                    var pressed = (element.getAttribute("aria-pressed") === "true");
                    element.setAttribute("aria-pressed", !pressed);
                    if (!pressed) {
                        let xmlHttp = new XMLHttpRequest();
                        xmlHttp.open("post", "https://localhost:5001/Back/Like?newsId=@Model.News.Id"); 
                        await xmlHttp.send();
                    } else {
                        let xmlHttp = new XMLHttpRequest();
                        xmlHttp.open("post", "https://localhost:5001/Back/UnLike?newsId=@Model.News.Id"); 
                        await xmlHttp.send();
                    }
                    setTimeout(function(){ location.reload()}, 100);
                }
            </script>
    </div>


    <div class="line"></div>
    <span class="newsTitle">
        Comments
    </span>
    <div class="comments">
        @foreach (var comment in Model.Comments)
        {
            <div class="comment">
                <div class="commentatorInfo">
                    <a href="https://localhost:5001/Profile?userId=@comment.Writer?.Id">
                        <img src="@comment.Writer?.AvatarUrl" alt="userAvatar" class='userAvatar avatar'>
                    </a>
                    @comment.Writer?.Name
                </div>
                <span class="commentText">
                    @comment.Text
                </span>
                @if (Model.User?.Id == comment.Writer?.Id)
                {
                    <form id="deleteComment@(comment.Id)">
                        <input type="hidden" name="commentId" value="@comment.Id"/>
                        <button class="deleteComment" type="submit">X</button>
                    </form>
                    <script>
                                            deleteComment@(comment.Id).onsubmit = async (e) => {
                                                e.preventDefault();
                                                let xmlHttp = new XMLHttpRequest();
                                                xmlHttp.open("post", "https://localhost:5001/Back/DeleteComment"); 
                                                await xmlHttp.send(new FormData(deleteComment@(comment.Id)));
                                                setTimeout(function(){ location.reload()}, 100);
                                            };
                    </script>
                }
            </div>
        }

        @if (Model.User is not null)
        {
            <form id="sendCommentForm" class="sendComment">
                <input type="hidden" name="newsId" value="@Model.News.Id"/>
                <input type="hidden" name="writerId" value="@Model.User?.Id"/>
                <textarea name="text" class="sendCommentInput" placeholder="Comment..."></textarea>
                <button class="sendCommentButton" type="submit">Send</button>
            </form>
            <script>
                    sendCommentForm.onsubmit = async (e) => {
                        e.preventDefault();
                        await fetch('https://localhost:5001/Back/SendComment', {
                            method: 'POST',
                            body: new FormData(sendCommentForm)
                        });
                        location.reload();
                    };
            </script>
        }
    </div>
</div>